import { useEffect, useState } from 'react';
import '../echo';

/**
 * Hook –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ —á–µ—Ä–µ–∑ Laravel Wave
 */
export function useRealtime() {
    const [connected, setConnected] = useState(false);
    const [error, setError] = useState<string | null>(null);

    useEffect(() => {
        try {
            // –¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –∫–∞–Ω–∞–ª—É
            const channel = window.Echo.private('App.Models.User.1');
            
            channel.subscribed(() => {
                console.log('‚úÖ Laravel Wave connected successfully');
                setConnected(true);
                setError(null);
            });

            channel.error((error: any) => {
                console.error('‚ùå Laravel Wave connection error:', error);
                setConnected(false);
                setError(error?.message || 'Connection failed');
            });

        } catch (err) {
            console.error('‚ùå Failed to initialize Laravel Wave:', err);
            setError('Failed to initialize connection');
        }

    }, []);

    return { connected, error };
}

/**
 * Hook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å–¥–µ–ª–æ–∫
 */
export function useRealtimeTrades(userId: number) {
    const [trades, setTrades] = useState<any[]>([]);
    const [lastTradeReceived, setLastTradeReceived] = useState<any>(null);

    useEffect(() => {
        const channel = window.Echo.private(`user.${userId}.trades`);
        
        channel.listen('TradeExecuted', (event: any) => {
            console.log('üî• New trade received via WebSocket:', event);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å–¥–µ–ª–∫—É –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
            setTrades(prev => [event.trade, ...prev]);
            setLastTradeReceived(event.trade);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            if (window.Notification && Notification.permission === 'granted') {
                new Notification(`Trade Closed: ${event.trade.symbol}`, {
                    body: `PnL: ${event.trade.pnl > 0 ? '+' : ''}${event.trade.pnl}`,
                    icon: event.trade.pnl > 0 ? '/profit-icon.png' : '/loss-icon.png'
                });
            }
        });

        channel.listen('TradeUpdated', (event: any) => {
            console.log('üìä Trade updated:', event);
            setTrades(prev => prev.map(trade => 
                trade.id === event.trade.id ? event.trade : trade
            ));
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        channel.error((error: any) => {
            console.error('‚ùå Real-time trades channel error:', error);
        });

        return () => {
            channel.unsubscribe();
        };
    }, [userId]);

    return { 
        trades, 
        lastTradeReceived,
        // –ú–µ—Ç–æ–¥ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ (fallback)
        refreshTrades: () => setTrades([])
    };
}

/**
 * Hook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –±–∞–ª–∞–Ω—Å–∞
 */
export function useRealtimeWallet(userId: number) {
    const [walletData, setWalletData] = useState<any>(null);

    useEffect(() => {
        const channel = window.Echo.private(`user.${userId}.wallet`);
        
        channel.listen('WalletUpdated', (event: any) => {
            console.log('üí∞ Wallet updated:', event);
            setWalletData(event.wallet);
        });

        return () => {
            channel.unsubscribe();
        };
    }, [userId]);

    return walletData;
}